@model ERP.MODEL.TrimsModel
@{
    ViewBag.Title = "Trims";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .field-validation-error, label.error {
        color: red;
    }

    .input-validation-error-jquery, input.error {
        border: 2px solid red;
    }

    .form-control[disabled], .form-control[readonly], fieldset[disabled] .form-control {
        background-color: yellow !important;
        opacity: 1 !important;
    }
</style>

<div class="col-md-12">

<div class="panel panel-card margin-b-30">
    <div class="panel-heading panel-heading-custom">
        <h4 class="panel-title">SEARCH TRIMS BY STYLE NUMBER</h4>
    </div>
    <div class="panel-body">
        @if (!string.IsNullOrWhiteSpace(ViewBag.InformationMessage))
        {

            <div class="row alert alert-danger alert-dismissable alert-custom">
                <button aria-hidden="true" data-dismiss="alert" class="close close-custom" type="button">×</button>
                <span class="success-msg text-center">@ViewBag.InformationMessage</span>
            </div>
        }

        <div class="row alert alert-success alert-dismissable alert-custom sizeRatioDeleteMsg" style="display: none;">
            <button aria-hidden="true" data-dismiss="alert" class="close close-custom" type="button">×</button>
            <span class="success-msg text-center"></span>
        </div>
        @using (Html.BeginForm("Index", "Trims", FormMethod.Post, new {@class = "form-horizontal", @id = "searchStyle"}))
        {
            @Html.AntiForgeryToken()
            <div class="form-group">
                <input type="text" name="DisplayInfo" id="DisplayInfo" autofocus="true" placeholder="Enter Style Number" value="" class="form-control"/>
            </div>
        }
    </div>
</div>
@using (Html.BeginForm("SaveTrimsInformation", "Trims", FormMethod.Post, new {@class = "form-horizontal product-datils-form"}))
{
    <div class="panel panel-card margin-b-30">
    <div class="panel-heading panel-heading-custom">
        <h4 class="panel-title">TRIMS ENTRY</h4>
    </div>
    <div class="panel-body">
    @Html.AntiForgeryToken()

    @if (!string.IsNullOrWhiteSpace(ViewBag.Message))
    {

        <div class="row alert alert-success alert-dismissable alert-custom">
            <button aria-hidden="true" data-dismiss="alert" class="close close-custom" type="button">×</button>
            <span class="success-msg text-center message-delete">@ViewBag.Message</span>
        </div>
    }

    <div class="row alert alert-success alert-dismissable alert-custom sizeRatioDeleteMsg" style="display: none;">
        <button aria-hidden="true" data-dismiss="alert" class="close close-custom" type="button">×</button>
        <span class="success-msg text-center"></span>
    </div>
    @if (Model.StyleNo != null && Model.TrimsMain.StyleNo == null)
    {
        <div class="col-md-12 col-lg-4">
            <div class="form-group">
                @Html.LabelFor(model => model.StyleNo, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.StyleNo, new {htmlAttributes = new {@class = "form-control readonly", @readonly = "readonly"}})
                    @Html.ValidationMessageFor(model => model.StyleNo, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.StyleName, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.StyleName, new {htmlAttributes = new {@class = "form-control readonly", @readonly = "readonly"}})
                    @Html.ValidationMessageFor(model => model.StyleName, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.MainLabel, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.MainLabel, new {htmlAttributes = new {@class = "form-control valrequired" } })
                    @Html.ValidationMessageFor(model => model.MainLabel, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.SewingThread, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(m => m.SewingThread, new {htmlAttributes = new {@class = "form-control valrequired" } })
                    @Html.ValidationMessageFor(m => m.SewingThread, "", new {@class = "text-danger"})
                    @Html.HiddenFor(c => c.SewingThread)
                </div>
            </div>
        </div>
        <div class="col-md-12 col-lg-4">
            <div class="form-group">
                @Html.LabelFor(model => model.SeasonYear, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.SeasonYear, new {htmlAttributes = new {@class = "form-control readonly", @readonly = "readonly"}})
                    @Html.ValidationMessageFor(model => model.SeasonYear, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.SeasonId, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.DropDownListFor(m => m.SeasonId, new SelectList(ViewBag.SeasonDDList, "Value", "Text", @Model.SeasonName), new {@class = "form-control custom-select-box", @disabled = "disabled" })
                    @Html.ValidationMessageFor(m => m.SeasonId, "", new {@class = "text-danger"})
                    @Html.HiddenFor(m => m.SeasonId, new { @Value = Model.SeasonName})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Interling, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Interling, new {htmlAttributes = new {@class = "form-control valrequired"}})
                    @Html.ValidationMessageFor(model => model.Interling, "", new {@class = "text-danger"})
                </div>
            </div>
        </div>
        <div class="col-md-12 col-lg-4">
            <div class="form-group">
                @Html.LabelFor(model => model.CareLabel, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.CareLabel, new {htmlAttributes = new {@class = "form-control valrequired"}})
                    @Html.ValidationMessageFor(model => model.CareLabel, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.SizeLabel, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.SizeLabel, new {htmlAttributes = new {@class = "form-control valrequired"}})
                    @Html.ValidationMessageFor(model => model.SizeLabel, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.HangTag, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.HangTag, new {htmlAttributes = new {@class = "form-control valrequired"}})
                    @Html.ValidationMessageFor(model => model.HangTag, "", new {@class = "text-danger"})
                </div>
            </div>
        </div>
    }
    else if (Model.TrimsMain.StyleNo != null && Model.TrimsMain.SeasonId != null && Model.TrimsMain.SeasonYear != null)
    {
        <div class="col-md-12 col-lg-4">
            <div class="form-group">
                @Html.LabelFor(model => model.StyleNo, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.StyleNo, new {htmlAttributes = new {@class = "form-control readonly", @readonly = "readonly"}})
                    @Html.ValidationMessageFor(model => model.StyleNo, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.StyleName, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.StyleName, new {htmlAttributes = new {@class = "form-control readonly", @readonly = "readonly"}})
                    @Html.ValidationMessageFor(model => model.StyleName, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.MainLabel, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.MainLabel, new {htmlAttributes = new {@class = "form-control"}})
                    @Html.ValidationMessageFor(model => model.MainLabel, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.SewingThread, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(m => m.SewingThread, new {htmlAttributes = new {@class = "form-control"}})
                    @Html.ValidationMessageFor(m => m.SewingThread, "", new {@class = "text-danger"})
                    @Html.HiddenFor(c => c.SewingThread)
                </div>
            </div>
        </div>
        <div class="col-md-12 col-lg-4">
            <div class="form-group">
                @Html.LabelFor(model => model.SeasonYear, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.SeasonYear, new {htmlAttributes = new {@class = "form-control readonly", @readonly = "readonly"}})
                    @Html.ValidationMessageFor(model => model.SeasonYear, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.SeasonName, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.DropDownListFor(m => m.SeasonName, new SelectList(ViewBag.SeasonDDList, "Value", "Text"), new {@class = "form-control custom-select-box readonly", @disabled = "disabled"})
                    @Html.ValidationMessageFor(m => m.SeasonName, "", new {@class = "text-danger"})
                    @Html.HiddenFor(c => c.SeasonName)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Interling, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Interling, new {htmlAttributes = new {@class = "form-control valrequired datepicker"}})
                    @Html.ValidationMessageFor(model => model.Interling, "", new {@class = "text-danger"})
                </div>
            </div>
        </div>
        <div class="col-md-12 col-lg-4">
            <div class="form-group">
                @Html.LabelFor(model => model.CareLabel, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.CareLabel, new {htmlAttributes = new {@class = "form-control valrequired"}})
                    @Html.ValidationMessageFor(model => model.CareLabel, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.SizeLabel, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.SizeLabel, new {htmlAttributes = new {@class = "form-control valrequired"}})
                    @Html.ValidationMessageFor(model => model.SizeLabel, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.HangTag, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.HangTag, new {htmlAttributes = new {@class = "form-control valrequired"}})
                    @Html.ValidationMessageFor(model => model.HangTag, "", new {@class = "text-danger"})
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="col-md-12 col-lg-4">
            <div class="form-group">
                @Html.LabelFor(model => model.StyleNo, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.StyleNo, new {htmlAttributes = new {@class = "form-control valrequired", @readonly = "readonly"}})
                    @Html.ValidationMessageFor(model => model.StyleNo, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.StyleName, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.StyleName, new {htmlAttributes = new {@class = "form-control valrequired", @readonly = "readonly"}})
                    @Html.ValidationMessageFor(model => model.StyleName, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.MainLabel, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.MainLabel, new {htmlAttributes = new {@class = "form-control valrequired", @readonly = "readonly"}})
                    @Html.ValidationMessageFor(model => model.MainLabel, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.SewingThread, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.SewingThread, new {htmlAttributes = new {@class = "form-control valrequired", @readonly = "readonly"}})
                    @Html.ValidationMessageFor(model => model.SewingThread, "", new {@class = "text-danger"})
                </div>
            </div>
        </div>
        <div class="col-md-12 col-lg-4">
            <div class="form-group">
                @Html.LabelFor(model => model.SeasonYear, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.SeasonYear, new {htmlAttributes = new {@class = "form-control valrequired", @readonly = "readonly"}})
                    @Html.ValidationMessageFor(model => model.SeasonYear, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.SeasonName, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.SeasonName, new {htmlAttributes = new {@class = "form-control valrequired", @readonly = "readonly"}})
                    @Html.ValidationMessageFor(model => model.SeasonName, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Interling, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Interling, new {htmlAttributes = new {@class = "form-control valrequired", @readonly = "readonly"}})
                    @Html.ValidationMessageFor(model => model.Interling, "", new {@class = "text-danger"})
                </div>
            </div>
        </div>
        <div class="col-md-12 col-lg-4">
            <div class="form-group">
                @Html.LabelFor(model => model.CareLabel, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.CareLabel, new {htmlAttributes = new {@class = "form-control valrequired", @readonly = "readonly"}})
                    @Html.ValidationMessageFor(model => model.CareLabel, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.SizeLabel, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.SizeLabel, new {htmlAttributes = new {@class = "form-control valrequired", @readonly = "readonly"}})
                    @Html.ValidationMessageFor(model => model.SizeLabel, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.HangTag, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-8">
                    @Html.EditorFor(model => model.HangTag, new {htmlAttributes = new {@class = "form-control valrequired", @readonly = "readonly"}})
                    @Html.ValidationMessageFor(model => model.HangTag, "", new {@class = "text-danger"})
                </div>
            </div>
        </div>
    }

    </div>
    </div>
    <div class="panel panel-card margin-b-30">
        <div class="panel-body">
                @if (Model.StyleNo != null)
                {

                    <div class="table-responsive">
                        <table class="table table-bordered table-hover table-striped">
                            <thead>
                                <tr>
                                    <th><input type="checkbox" class="allGridCheck"></th>
                                    <th>Accessories</th>
                                    <th>Trims Code</th>
                                    <th>Per Garments Quantity</th>
                                    <th>Total Quantity</th>
                                </tr>
                            </thead>
                            <tbody class="GridContent" id="GridBody">
                                @if (Model.TrimsSubs.Any())
                                {
                                    foreach (var data in Model.TrimsSubs)
                                    {
                                        <tr class="GridFields">
                                            <td><input type="checkbox" class="singleGridCheck"></td>
                                            <td>
                                                @Html.DropDownListFor(m => m.Accessories, new SelectList(ViewBag.AccessoriesDDList, "Value", "Text", @data.Accessories), new { @class = "form-control custom-select-box valrequired" })
                                                @Html.ValidationMessageFor(m => m.Accessories, "", new { @class = "text-danger" })
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(m => m.TrimsCode, new { @class = "form-control", @autofocus = true, @placeholder = "Enter Trims Code", @Value = data.TrimsCode })
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(m => m.PerGarmentsQuantity, new { @class = "form-control valrequired", @autofocus = true, @placeholder = "Enter Per Garments Quantity", @Value = data.PerGarmentsQuantity, @type = "number" })
                                                @Html.ValidationMessageFor(m => m.PerGarmentsQuantity, "", new { @class = "text-danger" })
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(m => m.TotalQuantity, new { @class = "form-control valrequired", @autofocus = true, @placeholder = "Enter Total Quantity", @Value = data.TotalQuantity, @type = "number" })
                                                @Html.ValidationMessageFor(m => m.TotalQuantity, "", new { @class = "text-danger" })
                                                @Html.HiddenFor(m => m.TranId, new { @Value = data.TranId, @class = "trnIdVal" })
                                                @Html.HiddenFor(m => m.StyleNo, new { @Value = data.StyleNo, @class = "styleNoVal" })
                                                @Html.HiddenFor(m => m.SeasonYear, new { @Value = data.SeasoneYear, @class = "StyleYearVal" })
                                                @Html.HiddenFor(m => m.SeasonId, new { @Value = data.SeasoneId, @class = "SeasonIdVal" })
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr class="GridFields">
                                        <td><input type="checkbox" class="singleGridCheck"></td>
                                        <td>
                                            @Html.DropDownListFor(m => m.Accessories, ViewBag.AccessoriesDDList as SelectList, new { @class = "form-control custom-select-box valrequired" })
                                            @Html.ValidationMessageFor(m => m.Accessories, "", new { @class = "text-danger" })
                                        </td>
                                        <td>
                                            @Html.TextBoxFor(m => m.TrimsCode, new { @class = "form-control", @autofocus = true, @placeholder = "Enter Trims Code" })
                                        </td>
                                        <td>
                                            @Html.TextBoxFor(m => m.PerGarmentsQuantity, new { @class = "form-control valrequired", @autofocus = true, @placeholder = "Enter Per Garments Quantity", @type = "number", required = true })
                                            @Html.ValidationMessageFor(m => m.PerGarmentsQuantity, "", new { @class = "text-danger" })
                                        </td>
                                        <td>
                                            @Html.TextBoxFor(m => m.TotalQuantity, new { @class = "form-control valrequired", @autofocus = true, @placeholder = "Enter Total Quantity", @type = "number", required = true })
                                            @Html.ValidationMessageFor(m => m.TotalQuantity, "", new { @class = "text-danger" })
                                            @Html.HiddenFor(c => c.TranId)
                                            @Html.HiddenFor(c => c.StyleNo)
                                            @Html.HiddenFor(c => c.SeasonYear)
                                            @Html.HiddenFor(c => c.SeasonName)
                                        </td>
                                    </tr>
                                }

                            </tbody>
                        </table>
                    </div>
                    <div class="text-right">
                        <button class="btn btn-md btn-success btn-save addGridButton" type="button">
                            <i class="fa fa-plus"></i> Add Row
                        </button>

                        <button class="btn btn-md btn-danger btn-save deleteGridBtn" type="button">
                            <i class="fa fa-minus"></i> Delete Row
                        </button>
                    </div>
                }
                <div class="row text-center">
                    <button class="btn btn-md btn-primary btn-save btn-submit" type="submit">
                        <i class="fa fa-save"></i> Save
                    </button>

                    <a href="@Url.Action("Index", "Trims")" class="btn btn-md btn-warning btn-clear">
                        <i class="fa fa-circle-o-notch"></i> Clear
                    </a>
                </div>
            </div>
    </div>

}
@if (Model.TrimsMains.Any())
    {
        <div class="panel panel-card margin-b-30">
            <div class="panel-body">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover table-striped">
                        <thead>
                            <tr>
                                <td>Style Number</td>
                                <td>Seasone Year</td>
                                <td>Seasone Name</td>
                                <td>Main Label</td>
                                <td>Care Label</td>
                                <td>Size Label</td>
                                <td>Sewing Thread</td>
                                <td>Interling</td>
                                <td>Hang Tag</td>
                                <td class="text-center"></td>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var data in Model.TrimsMains)
                            {
                                <tr>
                                    <td>@data.StyleNo</td>
                                    <td>@data.SeasonYear</td>
                                    <td>@data.SeasonName</td>
                                    <td>@data.MainLabel</td>
                                    <td>@data.CareLabel</td>
                                    <td>@data.SizeLabel</td>
                                    <td>@data.SewingThread</td>
                                    <td>@data.Interling</td>
                                    <td>@data.HangTag</td>
                                    <td>
                                        @Html.ActionLink(" Edit", "Index", "Trims", new { seasonId = data.SeasonId, seasonYear = data.SeasonYear, styleNumber = data.StyleNo }, new { @class = " btn btn-info fa fa-edit" }) ||
                                        @Html.ActionLink(" Report", "TrimsDetailsReport", "Trims", new { seasonId = data.SeasonId, seasonYear = data.SeasonYear, styleNumber = data.StyleNo }, new { @class = " btn btn-info fa fa-edit", target = "_blank" })

                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
}
else
{
    <div class="panel panel-card margin-b-30">
        <div class="panel-body">
            <p class="text-center">No data found</p>
        </div>
    </div>
}


</div>
        
@section scripts
{
  
    <script>
        $(document).ready(function() {

            var availableTags = [];

            function getStyle(vStyleNo) {
                $.ajax({
                    type: "post",
                    url: "/PoEntry/GetStyleNo?query=" + vStyleNo,
                    success: function(res) {
                        if (availableTags.length >= 0) {
                            availableTags.length = 0;
                        }
                        $.each(res, function(ind, val) {
                            availableTags.push(val.DisplayInfo);
                        });
                    }
                });
            }

            $(document).on("keyup", "#DisplayInfo", function() {
                var styleNo = $("#DisplayInfo").val();
                if (styleNo) {
                    getStyle(styleNo);
                }
            });

            $("#DisplayInfo").autocomplete({
                source: availableTags,
                autoFocus: true
            });


            $(document).on('click change keyup', '.valrequired', function() {
                if ($(this).hasClass('input-validation-error-jquery') && $(this).val()) {
                    $(this).removeClass('input-validation-error-jquery');
                }
            });
            $(document).on('click', '.btn-submit', function(e) {
                e.preventDefault();
                $('.valrequired').each(function() {
                    if (!$(this).hasClass('input-validation-error-jquery') && !$(this).val()) {
                        $(this).addClass('input-validation-error-jquery');
                    }
                });
                var empty = $('.valrequired').filter(function() {
                    return this.value === "";
                });
                if (empty.length <= 0) {
                    $('.product-datils-form').submit();
                }
            });
        });

        $(document).on('click', '.addGridButton', function () {
            var markUp = $('.GridFields:eq( 0 )').clone();
            $('.GridContent').append(markUp).find(".GridFields:eq( -1 ) input[type='text'],.GridFields:eq( -1 ) input[type='hidden'],.GridFields:eq( -1 ) input[type='number'],.GridFields:eq( -1 ) select option:contains('Please select one')").val('').prop('selected', true);
            //$('.BomGridContent').append(markUp).find(".BomGridFields:eq( -1 ) input[type='text'], hidden,select");
            var rowNumber = $('#GridBody tr').length;
            $('#RowNumber').val(rowNumber);
        });

        $(document).on('click', '.deleteGridBtn', function () {
            if (confirm('Are you sure to delete this record?') === true) {
                var transId = [];
                var styleNoVal = [];
                var styleYearVal = [];
                var seasonIdVal = [];
                $('.GridContent input:checkbox:checked').each(function () {
                    if ($('.allGridCheck').is(':checked')) {
                        $(this).parents('.GridContent').find('.GridFields:gt( 0 )').remove();
                        $('input[type="checkbox"]').prop('checked', false);
                    } else {
                        $(this).parents('.GridFields').remove();
                        $(this).parents('.GridContent').find('.GridFields:gt( 0 )').remove();
                    }
                    var trnId = $(this).parents('.GridFields').find('.trnIdVal').val();
                    var stlNo = $(this).parents('.GridFields').find('.styleNoVal').val();
                    var stlYr = $(this).parents('.GridFields').find('.StyleYearVal').val();
                    var seasnId = $(this).parents('.GridFields').find('.SeasonIdVal').val();
                    if (trnId) {
                        transId.push(trnId);
                    }
                    if (stlNo) {
                        styleNoVal.push(stlNo);
                    }
                    if (stlYr) {
                        styleYearVal.push(stlYr);
                    }
                    if (seasnId) {
                        seasonIdVal.push(seasnId);
                    }

                });
                if (transId.length && styleNoVal.length && styleYearVal.length && seasonIdVal.length) {
                    $.ajax({
                        type: "POST",
                        url: "/Trims/DeleteTrimsSub",
                        data: { TranId: transId, StyleNo: styleNoVal, SeasonYear: styleYearVal, SeasonId: seasonIdVal },
                        success: function (data) {
                            $('.message-delete').text(data);
                            $("#GridBody").load(" #GridBody > *");
                        }
                    });
                }
            }
        });

        $(document).on('click', '.allGridCheck', function () {
            if (this.checked) {
                $('.GridContent input:checkbox').prop('checked', true);
            } else {
                $('.GridContent input:checkbox').prop('checked', false);
            }
        });

        $(document).on('click', '.singleGridCheck', function () {
            if ($('.singleGridCheck:checked').length === $('.singleGridCheck').length) {
                $('.allGridCheck:checkbox').prop('checked', true);
            } else {
                $('.allGridCheck:checkbox').prop('checked', false);
            }

        });
    </script>
}

