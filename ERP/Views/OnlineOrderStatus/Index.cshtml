@model ERP.MODEL.OnlineOrderStatusModel
@{
    ViewBag.Title = "Online Order Status";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .field-validation-error, label.error {
        color: red;
    }

    .input-validation-error-jquery, input.error {
        border: 2px solid red;
    }

    .form-control[disabled], .form-control[readonly], fieldset[disabled] .form-control {
        background-color: yellow !important;
        opacity: 1 !important;
    }
</style>

<div class="col-md-12">

    <div class="panel panel-card margin-b-30">
            <div class="panel-heading panel-heading-custom">
                <h4 class="panel-title">ONLINE ORDER STATUS SEARCH</h4>
            </div>
            <div class="panel-body">
                @*@if (!string.IsNullOrWhiteSpace(ViewBag.InformationMessage))
                {

                    <div class="row alert alert-danger alert-dismissable alert-custom">
                        <button aria-hidden="true" data-dismiss="alert" class="close close-custom" type="button">×</button>
                        <span class="success-msg text-center">@ViewBag.InformationMessage</span>
                    </div>
                }

                <div class="row alert alert-success alert-dismissable alert-custom sizeRatioDeleteMsg" style="display: none;">
                    <button aria-hidden="true" data-dismiss="alert" class="close close-custom" type="button">×</button>
                    <span class="success-msg text-center"></span>
                </div>*@
                @using (Html.BeginForm("Index", "OnlineOrderStatus", FormMethod.Post, new {@class = "form-horizontal", @id = "searchStyle"}))
                {
                    @Html.AntiForgeryToken()
                    <div class="col-md-12 col-lg-3">

                        <div class="form-group">
                            @Html.LabelFor(model => model.OrderReceiveDate, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.OrderReceiveDate, new { htmlAttributes = new { @class = "form-control datepicker"} })
                             
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.OrderDeliveryDate, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.OrderDeliveryDate, new { htmlAttributes = new { @class = "form-control datepicker" } })
                              
                            </div>
                        </div>


                    </div>
                    <div class="col-md-12 col-lg-3">

                        <div class="form-group">
                            @Html.LabelFor(model => model.CustomerName, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control" } })
                                
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.CellNo, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.CellNo, new { htmlAttributes = new { @class = "form-control" } })                         
                            </div>
                        </div>


                    </div>
                    <div class="col-md-12 col-lg-3">
                    

                        <div class="form-group">
                            @Html.LabelFor(model => model.OrderNo, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.OrderNo, new { htmlAttributes = new { @class = "form-control" } })
                             
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.OrderSourceId, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.OrderSourceId, new { htmlAttributes = new { @class = "form-control" } })
                            
                            </div>
                        </div>                     
                    </div>
                    <div class="col-md-12 col-lg-3">

                        <div class="form-group">
                            @Html.LabelFor(model => model.CustomerHomeAddress, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.CustomerHomeAddress, new {htmlAttributes = new {@class = "form-control"}})
                              
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.WebAddress, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.WebAddress, new {htmlAttributes = new {@class = "form-control"}})
                             
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Delivered_YN, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                <input type="checkbox" class="singleGridCheck">

                            </div>
                        </div>
                    </div>

                    <div class="row text-center">
                        <button class="btn btn-md btn-primary btn-save btn-submit" style="background-color: #01a8fe; margin-right: 75%;" type="submit">
                            <i class="fa fa-save"></i> Search
                        </button>                   
                    </div>
                }
            </div>
        </div>


    @using (Html.BeginForm("SaveTrimsInformation", "OnlineOrderStatus", FormMethod.Post, new { @class = "form-horizontal product-datils-form" }))
    {
        <div class="panel panel-card margin-b-30">
            <div class="panel-heading panel-heading-custom">
                <h4 class="panel-title">ONLINE ORDER STATUS</h4>
            </div>
            <div class="panel-body">
                @Html.AntiForgeryToken()

                @if (!string.IsNullOrWhiteSpace(ViewBag.Message))
                {

                    <div class="row alert alert-success alert-dismissable alert-custom">
                        <button aria-hidden="true" data-dismiss="alert" class="close close-custom" type="button">×</button>
                        <span class="success-msg text-center message-delete">@ViewBag.Message</span>
                    </div>
                }

                <div class="row alert alert-success alert-dismissable alert-custom sizeRatioDeleteMsg" style="display: none;">
                    <button aria-hidden="true" data-dismiss="alert" class="close close-custom" type="button">×</button>
                    <span class="success-msg text-center"></span>
                </div>
                @if (Model.OrderNo != null && Model.OnlineOrderMain.OrderNo == null)
                {
                    <div class="col-md-12 col-lg-3">

                        <div class="form-group">
                            @Html.LabelFor(model => model.OrderNo, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.OrderNo, new { htmlAttributes = new { @class = "form-control valrequired", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.OrderNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.CustomerName, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control valrequired", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.OrderReceiveDate, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.OrderReceiveDate, new { htmlAttributes = new { @class = "form-control valrequired datepicker", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.OrderReceiveDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.DeliveryCost, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.DeliveryCost, new { htmlAttributes = new { @class = "form-control valrequired", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.DeliveryCost, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.CustomerHomeAddress, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.CustomerHomeAddress, new { htmlAttributes = new { @class = "form-control valrequired", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.CustomerHomeAddress, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12 col-lg-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CellNo, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.CellNo, new { htmlAttributes = new { @class = "form-control valrequired", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.CellNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Telephone, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.Telephone, new { htmlAttributes = new { @class = "form-control valrequired", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.Telephone, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.OrderDeliveryDate, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.OrderDeliveryDate, new { htmlAttributes = new { @class = "form-control valrequired datepicker", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.OrderDeliveryDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DeliveryProcessCost, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.DeliveryProcessCost, new { htmlAttributes = new { @class = "form-control valrequired", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.DeliveryProcessCost, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control valrequired", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                            </div>
                        </div>


                    </div>
                    <div class="col-md-12 col-lg-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.EmailAddress, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.EmailAddress, new { htmlAttributes = new { @class = "form-control valrequired", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.WebAddress, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.WebAddress, new { htmlAttributes = new { @class = "form-control valrequired", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.WebAddress, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.OrderSourceId, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.OrderSourceId, new { htmlAttributes = new { @class = "form-control valrequired", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.OrderSourceId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.PaymentTypeId, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.PaymentTypeId, new { htmlAttributes = new { @class = "form-control valrequired", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.PaymentTypeId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Delivered_YN, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                <input type="checkbox" class="singleGridCheck">

                            </div>
                        </div>
                    </div>


                    @*<div class="form-group">
                            @Html.LabelFor(model => model.SeasonId, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                @Html.DropDownListFor(m => m.SeasonId, new SelectList(ViewBag.SeasonDDList, "Value", "Text", @Model.Telephone), new {@class = "form-control custom-select-box", @disabled = "disabled" })
                                @Html.ValidationMessageFor(m => m.SeasonId, "", new {@class = "text-danger"})
                                @Html.HiddenFor(m => m.SeasonId, new { @Value = Model.Telephone})
                            </div>
                        </div>*@


                }
                else if (Model.OnlineOrderMain.OrderNo != null && Model.OnlineOrderMain.OrderReceiveDate != null)
                {
                    <div class="col-md-12 col-lg-3">

                        <div class="form-group">
                            @Html.LabelFor(model => model.OrderNo, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.OrderNo, new {htmlAttributes = new {@class = "form-control valrequired", @readonly = "readonly"}})
                                @Html.ValidationMessageFor(model => model.OrderNo, "", new {@class = "text-danger"})
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.CustomerName, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.CustomerName, new {htmlAttributes = new {@class = "form-control valrequired", @readonly = "readonly"}})
                                @Html.ValidationMessageFor(model => model.CustomerName, "", new {@class = "text-danger"})
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.OrderReceiveDate, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.OrderReceiveDate, new {htmlAttributes = new {@class = "form-control valrequired datepicker", @readonly = "readonly"}})
                                @Html.ValidationMessageFor(model => model.OrderReceiveDate, "", new {@class = "text-danger"})
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.DeliveryCost, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.DeliveryCost, new {htmlAttributes = new {@class = "form-control valrequired", @readonly = "readonly"}})
                                @Html.ValidationMessageFor(model => model.DeliveryCost, "", new {@class = "text-danger"})
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.CustomerHomeAddress, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.CustomerHomeAddress, new {htmlAttributes = new {@class = "form-control valrequired", @readonly = "readonly"}})
                                @Html.ValidationMessageFor(model => model.CustomerHomeAddress, "", new {@class = "text-danger"})
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12 col-lg-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CellNo, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.CellNo, new { htmlAttributes = new { @class = "form-control valrequired", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.CellNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Telephone, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.Telephone, new { htmlAttributes = new { @class = "form-control valrequired", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.Telephone, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.OrderDeliveryDate, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.OrderDeliveryDate, new { htmlAttributes = new { @class = "form-control valrequired datepicker", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.OrderDeliveryDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DeliveryProcessCost, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.DeliveryProcessCost, new { htmlAttributes = new { @class = "form-control valrequired", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.DeliveryProcessCost, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control valrequired", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                            </div>
                        </div>


                    </div>
                    <div class="col-md-12 col-lg-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.EmailAddress, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.EmailAddress, new { htmlAttributes = new { @class = "form-control valrequired", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.WebAddress, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.WebAddress, new { htmlAttributes = new { @class = "form-control valrequired", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.WebAddress, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.OrderSourceId, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.OrderSourceId, new { htmlAttributes = new { @class = "form-control valrequired", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.OrderSourceId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.PaymentTypeId, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.PaymentTypeId, new { htmlAttributes = new { @class = "form-control valrequired", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.PaymentTypeId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Delivered_YN, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                <input type="checkbox" class="singleGridCheck">

                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="col-md-12 col-lg-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.OrderNo, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.OrderNo, new {htmlAttributes = new {@class = "form-control valrequired" }})
                                @Html.ValidationMessageFor(model => model.OrderNo, "", new {@class = "text-danger"})
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.CustomerName, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.CustomerName, new {htmlAttributes = new {@class = "form-control valrequired" }})
                                @Html.ValidationMessageFor(model => model.CustomerName, "", new {@class = "text-danger"})
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.OrderReceiveDate, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.OrderReceiveDate, new {htmlAttributes = new {@class = "form-control valrequired datepicker" }})
                                @Html.ValidationMessageFor(model => model.OrderReceiveDate, "", new {@class = "text-danger"})
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.DeliveryCost, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.DeliveryCost, new {htmlAttributes = new {@class = "form-control valrequired" }})
                                @Html.ValidationMessageFor(model => model.DeliveryCost, "", new {@class = "text-danger"})
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.CustomerHomeAddress, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.CustomerHomeAddress, new {htmlAttributes = new {@class = "form-control valrequired" }})
                                @Html.ValidationMessageFor(model => model.CustomerHomeAddress, "", new {@class = "text-danger"})
                            </div>
                        </div>

                    </div>
                    <div class="col-md-12 col-lg-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CellNo, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.CellNo, new {htmlAttributes = new {@class = "form-control valrequired" }})
                                @Html.ValidationMessageFor(model => model.CellNo, "", new {@class = "text-danger"})
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Telephone, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.Telephone, new {htmlAttributes = new {@class = "form-control valrequired" }})
                                @Html.ValidationMessageFor(model => model.Telephone, "", new {@class = "text-danger"})
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.OrderDeliveryDate, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.OrderDeliveryDate, new {htmlAttributes = new {@class = "form-control valrequired datepicker" }})
                                @Html.ValidationMessageFor(model => model.OrderDeliveryDate, "", new {@class = "text-danger"})
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DeliveryProcessCost, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.DeliveryProcessCost, new { htmlAttributes = new { @class = "form-control valrequired" } })
                                @Html.ValidationMessageFor(model => model.DeliveryProcessCost, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Remarks, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.Remarks, new {htmlAttributes = new {@class = "form-control valrequired" }})
                                @Html.ValidationMessageFor(model => model.Remarks, "", new {@class = "text-danger"})
                            </div>
                        </div>


                    </div>
                    <div class="col-md-12 col-lg-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.EmailAddress, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.EmailAddress, new {htmlAttributes = new {@class = "form-control valrequired"}})
                                @Html.ValidationMessageFor(model => model.EmailAddress, "", new {@class = "text-danger"})
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.WebAddress, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.WebAddress, new {htmlAttributes = new {@class = "form-control valrequired"}})
                                @Html.ValidationMessageFor(model => model.WebAddress, "", new {@class = "text-danger"})
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.OrderSourceId, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.OrderSourceId, new {htmlAttributes = new {@class = "form-control valrequired"}})
                                @Html.ValidationMessageFor(model => model.OrderSourceId, "", new {@class = "text-danger"})
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.PaymentTypeId, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.PaymentTypeId, new {htmlAttributes = new {@class = "form-control valrequired"}})
                                @Html.ValidationMessageFor(model => model.PaymentTypeId, "", new {@class = "text-danger"})
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Delivered_YN, htmlAttributes: new {@class = "control-label col-md-4"})
                            <div class="col-md-8">
                                <input type="checkbox" class="singleGridCheck">

                            </div>
                        </div>

                    </div>
                    @*<div class="col-md-12 col-lg-3">
                        <div class="form-group">
                             <div class="col-lg-8">
                                <div class="show-online-order-div">
                                    @if (Model != null && !String.IsNullOrEmpty(Model.EditImageFileNameBase64))
                                    {
                                        <img id="showImage" style="width: 100%; height: 100%;" src="@Model.EditImageFileNameBase64">
                                    }
                                    else
                                    {
                                        <img id="showImage" style="width: 100%; height: 100%;">
                                    }
                                </div>
                                <div class="fileUpload btn btn-sm btn-primary btn-image">
                                    <span><i class="fa fa-picture-o"></i> Choose Image</span>
                                    @Html.TextBoxFor(m => m.ProductImage, "", new { @type = "file", @class = "imageUpload", @onchange = "imageUpload(event)" })
                                </div>
                            </div>
                        </div>
                    </div>*@
                    <div class="col-md-12 col-lg-3">
                        <div class="form-group">
                            @Html.LabelFor(m => m.HttpPostedFileBase, new { @class = "col-lg-4 control-label" })
                            <div class="col-lg-8">

                                <div class="show-image-div">
                                    @if (!string.IsNullOrWhiteSpace(Model.ProductImage))
                                    {
                                        <img id="SwatchImage" style="width: 100%; height: 100%;" src="@Model.ProductImage" alt="No image found" />
                                    }
                                    else
                                    {
                                        <img id="SwatchImage" style="width: 100%; height: 100%;" alt="N/A" />
                                    }
                                </div>

                                @Html.TextBoxFor(m => m.HttpPostedFileBase, new { @class = "form-control", @placeholder = "Please provide image", @type = "file", @accept = "image/*", @onchange = "imageUpload(event)" })
                                @Html.ValidationMessageFor(m => m.HttpPostedFileBase, "", new { @class = "text-danger", @id = "HttpPostedFileBaseValMsg" })
                            </div>
                            <div class="col-lg-1"></div>
                        </div>
                    </div>

                }

                    </div>
        </div>
        <div class="panel panel-card margin-b-30">
            <div class="panel-body">
                @*@if (Model.OrderNo != null)
                {*@

                    <div class="table-responsive">
                        <table class="table table-bordered table-hover table-striped">
                            <thead>
                                <tr>
                                    <th>Style</th>
                                    <th>Product Description</th>
                                    <th>Size</th>
                                    <th>Color</th>
                                    <th>Qty</th>
                                    <th>MRP</th>
                                    <th>Promotion Code</th>
                                    <th>Promotion(%)</th>
                                    <th>Discount Amount</th>
                                    <th>Total Amount</th>
                                </tr>
                            </thead>
                            <tbody class="GridContent" id="GridBody">
                            @if (Model.OnlineOrderSubs.Any())
                            {
                                foreach (var data in Model.OnlineOrderSubs)
                                {
                                    <tr class="GridFields">
                                        <td>
                                            @Html.TextBoxFor(m => m.StyleName, new {@class = "form-control", @autofocus = true, @placeholder = "Enter Trims Code", @Value = data.StyleName})
                                        </td>
                                        <td>
                                            @Html.TextBoxFor(m => m.ProductDescription, new {@class = "form-control", @autofocus = true, @placeholder = "Enter Trims Code", @Value = data.ProductDescription})
                                        </td>
                                        <td>
                                            @Html.TextBoxFor(m => m.SizeName, new {@class = "form-control", @autofocus = true, @placeholder = "Enter Trims Code", @Value = data.SizeName})
                                        </td>
                                        <td>
                                            @Html.TextBoxFor(m => m.ColorName, new {@class = "form-control", @autofocus = true, @placeholder = "Enter Trims Code", @Value = data.ColorName})
                                        </td>
                                        <td>
                                            @Html.TextBoxFor(m => m.ProductQuantity, new {@class = "form-control", @autofocus = true, @placeholder = "Enter Trims Code", @Value = data.ProductQuantity})
                                        </td>

                                        <td>
                                            @Html.TextBoxFor(m => m.ProductPrice, new {@class = "form-control valrequired", @autofocus = true, @placeholder = "Enter Total Quantity", @Value = data.ProductPrice, @type = "number"})
                                            @*@Html.ValidationMessageFor(m => m.ProductPrice, "", new { @class = "text-danger" })*@
                                            @Html.HiddenFor(m => m.TranId, new {@Value = data.TranId, @class = "trnIdVal"})
                                            @Html.HiddenFor(m => m.OrderReceiveDate, new {@Value = data.OrderReceiveDate, @class = "styleNoVal"})
                                            @Html.HiddenFor(m => m.OrderNo, new {@Value = data.OrderNo, @class = "StyleYearVal"})

                                        </td>
                                    </tr>


                                

                                }

                                
                            }
                            else
                            {
                                <tr class="GridFields">
                                    <td>@Html.TextBoxFor(m => m.StyleName, new {@class = "form-control", @autofocus = true, @placeholder = "Enter Trims Code"})</td>
                                    <td>
                                        @Html.TextBoxFor(m => m.ProductDescription, new {@class = "form-control", @autofocus = true, @placeholder = "Enter Trims Code"})
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(m => m.SizeName, new {@class = "form-control", @autofocus = true, @placeholder = "Enter Per Garments Quantity", @type = "number", required = true})
                                        @Html.ValidationMessageFor(m => m.SizeName, "", new {@class = "text-danger"})
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(m => m.ColorName, new {@class = "form-control", @autofocus = true, @placeholder = "Enter Per Garments Quantity", @type = "number", required = true})
                                        @Html.ValidationMessageFor(m => m.ColorName, "", new {@class = "text-danger"})
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(m => m.ProductQuantity, new {@class = "form-control", @autofocus = true, @placeholder = "Enter Per Garments Quantity", @type = "number", required = true})
                                        @Html.ValidationMessageFor(m => m.ProductQuantity, "", new {@class = "text-danger"})
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(m => m.ProductPrice, new {@class = "form-control", @autofocus = true, @placeholder = "Enter Total Quantity", @type = "number", required = true})
                                        @Html.ValidationMessageFor(m => m.ProductPrice, "", new {@class = "text-danger"})
                                        @Html.HiddenFor(c => c.TranId)
                                        @Html.HiddenFor(c => c.OrderReceiveDate)
                                        @Html.HiddenFor(c => c.OrderNo)

                                    </td>
                                    <td>
                                        @Html.TextBoxFor(m => m.PromotionCode, new {@class = "form-control", @autofocus = true, @placeholder = "Enter Promotion Code" })
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(m => m.PromotionPercentage, new {@class = "form-control", @autofocus = true, @placeholder = "Enter Promotion(%)"})
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(m => m.DiscountAmount, new {@class = "form-control", @autofocus = true, @placeholder = "Enter Discount Amount" })
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(m => m.TotalAmount, new { @class = "form-control", @autofocus = true, @placeholder = "Total Amount" })
                                    </td>
                                </tr>

                                @*<tr>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td class="bg-green-300 text-right"><label class="text-bold grandTotalQnty text-right"></label></td>
                                    <td class="bg-green-300 text-right"><label class="text-bold grandMRP text-right"></label></td>
                                    <td></td>
                                    <td></td>
                                    <td class="bg-green-300 text-right"><label class="text-bold grandDiscountAmt text-right"></label></td>
                                    <td class="bg-green-300 text-right"><label class="text-bold grandTotalAmount text-right"></label></td>

                                </tr>*@

                            }

                            </tbody>

                            <tfoot>
                                <tr>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td class="bg-green-300 text-right"><label class="text-bold grandTotalQnty text-right"></label></td>
                                    <td class="bg-green-300 text-right"><label class="text-bold grandMRP text-right"></label></td>
                                    <td></td>
                                    <td></td>
                                    <td class="bg-green-300 text-right"><label class="text-bold grandDiscountAmt text-right"></label></td>
                                    <td class="bg-green-300 text-right"><label class="text-bold grandTotalAmount text-right"></label></td>

                                </tr>
                            </tfoot>

                        </table>
                    </div>
                    <div class="text-right">
                        <button class="btn btn-md btn-success btn-save addGridButton" type="button">
                            <i class="fa fa-plus"></i> Add Row
                        </button>

                        <button class="btn btn-md btn-danger btn-save deleteGridBtn" type="button">
                            <i class="fa fa-minus"></i> Delete Row
                        </button>
                    </div>
                    @*}*@
                <div class="row text-center">
                    <button class="btn btn-md btn-primary btn-save btn-submit" type="submit">
                        <i class="fa fa-save"></i> Save
                    </button>

                    <a href="@Url.Action("Index", "OnlineOrderStatus")" class="btn btn-md btn-warning btn-clear">
                        <i class="fa fa-circle-o-notch"></i> Clear
                    </a>
                </div>
            </div>
        </div>

    }

                    @*@if (Model.OnlineOrderMains.Any())*@
                    @if (Model.OnlineOrderSubMain.Any())
                    {
                        <div class="panel panel-card margin-b-30">
                            <div class="panel-body">
                                <div class="table-responsive">
                                    <table class="table table-bordered table-hover table-striped">
                                        <thead>
                                            <tr>
                                                <td>ORDER NO</td>
                                                <td>PRODUCT DESCRIPTION</td>
                                                <td>STYLE</td>
                                                <td>SIZE</td>
                                                <td>COLOR</td>
                                                <td>QTY</td>
                                                <td>MRP</td>
                                                <td>TOTAL AMOUNT</td>
                                                <td>CUSTOMER NAME</td>
                                                <td>HOME ADDRESS</td>
                                                <td>CELL NO</td>
                                                <td>TELEPHONE NO</td>
                                                <td>EMAIL</td>
                                                <td>WEB ADDRESS</td>
                                                <td>ORDER RECEIVE DATE</td>
                                                <td>ORDER DELIVERY DATE</td>
                                                <td>ORDER SOURCE</td>
                                                <td>DELIVERY COST</td>
                                                <td>PROMOTION CODE</td>
                                                <td>DISCOUNT</td>
                                                <td>REMARKS</td>
                                                <td>STATUS</td>
                                                <td>IMAGE</td>
                                                <td class="text-center"></td>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var data in Model.OnlineOrderSubMain)
                                            {
                                                //ORDER NO PRODUCT DESCRIPTION STYLE SIZE    COLOR QTY MRP TOTAL AMOUNT CUSTOMER NAME
                                                //HOME ADDRESS CELL NO TELEPHONE NO Email   WEB ADDRESS ORDER RECEIVE DATE ORDER DELIVERY DATE ORDER SOURCE    DELIVERY COST   PROMOTION CODE  DISCOUNT REMARKS STATUS
                                                <tr>
                                                    <td>@data.OrderNo</td>
                                                    <td>@data.ProductDescription</td>
                                                    <td>@data.StyleName</td>
                                                    <td>@data.SizeName</td>
                                                    <td>@data.ColorName</td>
                                                    <td>@data.ProductQuantity</td>
                                                    <td>@data.ProductPrice</td>
                                                    <td>@data.TotalAmount</td>
                                                    <td>@data.CustomerName</td>
                                                    <td>@data.CustomerHomeAddress</td>
                                                    <td>@data.CellNo</td>
                                                    <td>@data.Telephone</td>
                                                    <td>@data.EmailAddress</td>
                                                    <td>@data.WebAddress</td>
                                                    <td>@data.OrderReceiveDate</td>
                                                    <td>@data.OrderDeliveryDate</td>
                                                    <td>@data.OrderSourceName</td>
                                                    <td>@data.DeliveryCost</td>
                                                    <td>@data.PromoCode</td>
                                                    <td>@data.DiscountAmount</td>
                                                    <td>@data.Remarks</td>
                                                    <td>@data.Delivered_YN</td>
                                                    <td><img src="data:image;base64,@Convert.ToBase64String(data.ProductPicture)" style="height: 50px; width: 50px; cursor: pointer" /></td>


                                                    <td>
                                                        @Html.ActionLink(" Edit", "Index", "OnlineOrderStatus", new { pOrderReceiveDate = data.OrderReceiveDate, pOrderNo = data.OrderNo }, new { @class = " btn btn-info fa fa-edit" }) ||
                                                        @*@Html.ActionLink(" Report", "TrimsDetailsReport", "Trims", new { seasonId = data.SeasonId, seasonYear = data.SeasonYear, styleNumber = data.StyleNo }, new { @class = " btn btn-info fa fa-edit", target = "_blank" })*@

                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="panel panel-card margin-b-30">
                            <div class="panel-body">
                                <p class="text-center">No data found</p>
                            </div>
                        </div>
                    }


                </div>

@section scripts
{

    <script>

        $(document).ready(function () {

            //var availableTags = [];

            //function getStyle(vStyleNo) {
            //    $.ajax({
            //        type: "post",
            //        url: "/PoEntry/GetStyleNo?query=" + vStyleNo,
            //        success: function(res) {
            //            if (availableTags.length >= 0) {
            //                availableTags.length = 0;
            //            }
            //            $.each(res, function(ind, val) {
            //                availableTags.push(val.DisplayInfo);
            //            });
            //        }
            //    });
            //}

            //$(document).on("keyup", "#DisplayInfo", function() {
            //    var styleNo = $("#DisplayInfo").val();
            //    if (styleNo) {
            //        getStyle(styleNo);
            //    }
            //});

            //$("#DisplayInfo").autocomplete({
            //    source: availableTags,
            //    autoFocus: true
            //});


            //$(document).on('click change keyup', '.valrequired', function() {
            //    if ($(this).hasClass('input-validation-error-jquery') && $(this).val()) {
            //        $(this).removeClass('input-validation-error-jquery');
            //    }
            //});
            //$(document).on('click', '.btn-submit', function(e) {
            //    e.preventDefault();
            //    $('.valrequired').each(function() {
            //        if (!$(this).hasClass('input-validation-error-jquery') && !$(this).val()) {
            //            $(this).addClass('input-validation-error-jquery');
            //        }
            //    });
            //    var empty = $('.valrequired').filter(function() {
            //        return this.value === "";
            //    });
            //    if (empty.length <= 0) {
            //        $('.product-datils-form').submit();
            //    }
            //});
        });


        var imageUpload = function (event) {
            var output = document.getElementById('showImage');
            output.src = URL.createObjectURL(event.target.files[0]);
        };



        $(document).on('click', '.addGridButton', function () {
            var markUp = $('.GridFields:eq( 0 )').clone();
            $('.GridContent').append(markUp).find(".GridFields:eq( -1 ) input[type='text'],.GridFields:eq( -1 ) input[type='hidden'],.GridFields:eq( -1 ) input[type='number'],.GridFields:eq( -1 ) select option:contains('Please select one')").val('').prop('selected', true);
            //$('.BomGridContent').append(markUp).find(".BomGridFields:eq( -1 ) input[type='text'], hidden,select");
            var rowNumber = $('#GridBody tr').length;
            $('#RowNumber').val(rowNumber);
        });

        //$(document).on('click', '.deleteGridBtn', function () {
        //    if (confirm('Are you sure to delete this record?') === true) {
        //        var transId = [];
        //        var styleNoVal = [];
        //        var styleYearVal = [];
        //        var seasonIdVal = [];
        //        $('.GridContent input:checkbox:checked').each(function () {
        //            if ($('.allGridCheck').is(':checked')) {
        //                $(this).parents('.GridContent').find('.GridFields:gt( 0 )').remove();
        //                $('input[type="checkbox"]').prop('checked', false);
        //            } else {
        //                $(this).parents('.GridFields').remove();
        //                $(this).parents('.GridContent').find('.GridFields:gt( 0 )').remove();
        //            }
        //            var trnId = $(this).parents('.GridFields').find('.trnIdVal').val();
        //            var stlNo = $(this).parents('.GridFields').find('.styleNoVal').val();
        //            var stlYr = $(this).parents('.GridFields').find('.StyleYearVal').val();
        //            var seasnId = $(this).parents('.GridFields').find('.SeasonIdVal').val();
        //            if (trnId) {
        //                transId.push(trnId);
        //            }
        //            if (stlNo) {
        //                styleNoVal.push(stlNo);
        //            }
        //            if (stlYr) {
        //                styleYearVal.push(stlYr);
        //            }
        //            if (seasnId) {
        //                seasonIdVal.push(seasnId);
        //            }

        //        });
        //        if (transId.length && styleNoVal.length && styleYearVal.length && seasonIdVal.length) {
        //            $.ajax({
        //                type: "POST",
        //                url: "/Trims/DeleteTrimsSub",
        //                data: { TranId: transId, StyleNo: styleNoVal, SeasonYear: styleYearVal, SeasonId: seasonIdVal },
        //                success: function (data) {
        //                    $('.message-delete').text(data);
        //                    $("#GridBody").load(" #GridBody > *");
        //                }
        //            });
        //        }
        //    }
        //});

        //$(document).on('click', '.allGridCheck', function () {
        //    if (this.checked) {
        //        $('.GridContent input:checkbox').prop('checked', true);
        //    } else {
        //        $('.GridContent input:checkbox').prop('checked', false);
        //    }
        //});

        //$(document).on('click', '.singleGridCheck', function () {
        //    if ($('.singleGridCheck:checked').length === $('.singleGridCheck').length) {
        //        $('.allGridCheck:checkbox').prop('checked', true);
        //    } else {
        //        $('.allGridCheck:checkbox').prop('checked', false);
        //    }

        //});


        var imageUpload = function (event) {
            var output = document.getElementById('SwatchImage');
            var fileInput = document.getElementById('HttpPostedFileBase');

            var filePath = fileInput.value;
            var allowedExtensions = /(\.jpg|\.jpeg|\.png|\.bmp)$/i;

            if (!allowedExtensions.exec(filePath)) {
                fileInput.value = '';
                output.src = null;
                document.getElementById("HttpPostedFileBaseValMsg").innerHTML = "Allowed image types: .jpg, .jpeg, .png, .bmp";
                return false;
            } else {
                output.src = URL.createObjectURL(event.target.files[0]);
                document.getElementById("HttpPostedFileBaseValMsg").innerHTML = "";
                return true;
            }
        };


    </script>
}

